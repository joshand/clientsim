# Generated by Django 3.0.2 on 2020-02-20 02:30

import client_sim.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(default=None, max_length=100, verbose_name='Application Description')),
                ('url', models.CharField(default=None, max_length=100, null=True, verbose_name='Application (URL)')),
            ],
        ),
        migrations.CreateModel(
            name='AppProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(default=None, max_length=100, verbose_name='Application Profile Description')),
                ('pdelay', models.IntegerField(default=0, verbose_name='Proxy Delay (seconds)')),
            ],
        ),
        migrations.CreateModel(
            name='Cloud',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Dashboard Integration Description')),
                ('key', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Access Key')),
                ('secret', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Access Secret')),
                ('zone', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Availability Zone')),
                ('vpc', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='VPC')),
                ('force_rebuild', models.BooleanField(default=False, verbose_name='Force Cloud Sync')),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CloudImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('default_username', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('cloudid', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('cloud', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Cloud')),
            ],
        ),
        migrations.CreateModel(
            name='CloudType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Dashboard Integration Description')),
            ],
        ),
        migrations.CreateModel(
            name='ContainerType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=100, verbose_name='Container Type')),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Dashboard Integration Description')),
                ('baseurl', models.CharField(default='https://api.meraki.com/api/v0', max_length=64)),
                ('apikey', models.CharField(max_length=64)),
                ('orgid', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('netid', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('username', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('password', models.CharField(blank=True, default=None, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventDay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('daynum', models.IntegerField(default=0)),
                ('dayname', models.CharField(max_length=20)),
            ],
            options={
                'ordering': ['daynum'],
            },
        ),
        migrations.CreateModel(
            name='InstanceAutomation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=100, verbose_name='Shell Commands')),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=15)),
                ('macaddress', models.CharField(default=None, max_length=17, null=True)),
                ('description', models.CharField(max_length=100, verbose_name='Interface Description')),
            ],
        ),
        migrations.CreateModel(
            name='LinkProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(default=None, max_length=100, verbose_name='Link Profile Description')),
                ('default_profile', models.BooleanField(default=False, editable=False)),
                ('tcdata', models.TextField(blank=True, default=None, null=True, verbose_name='Linux TC Commands')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt', models.DateTimeField(auto_now=True)),
                ('function', models.CharField(default=None, max_length=100, null=True)),
                ('step', models.CharField(default=None, max_length=100, null=True)),
                ('log', models.TextField()),
            ],
            options={
                'ordering': ['-dt'],
            },
        ),
        migrations.CreateModel(
            name='NetworkType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('driver', models.CharField(max_length=20, verbose_name='Docker Network Driver')),
                ('description', models.CharField(max_length=100, verbose_name='Network Type Description')),
            ],
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('file', models.FileField(upload_to='.')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vlan', models.IntegerField(blank=True, default=0)),
                ('subnet', models.CharField(blank=True, default=None, max_length=18, null=True)),
                ('dg', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('addrpool', models.CharField(blank=True, default=None, max_length=18, null=True, verbose_name='Client Address Pool')),
                ('networkid', models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name='Docker Network ID')),
                ('description', models.CharField(max_length=100, verbose_name='Network Description')),
                ('active', models.BooleanField(default=True)),
                ('force_script', models.BooleanField(default=False, verbose_name='Force Impairment Script Update')),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_deployed_hash', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('interface', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Interface')),
                ('networktype', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.NetworkType')),
            ],
        ),
        migrations.CreateModel(
            name='LinkEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('starttime', models.TimeField(default=django.utils.timezone.now)),
                ('endtime', models.TimeField(default=django.utils.timezone.now)),
                ('day', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.EventDay')),
                ('linkprofile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.LinkProfile')),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Network')),
            ],
            options={
                'ordering': ['network', 'day', 'starttime'],
            },
        ),
        migrations.CreateModel(
            name='DashboardLicense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('license', models.CharField(max_length=32, verbose_name='Dashboard License Key (vMX)')),
                ('dashboard', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Dashboard')),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('path', models.CharField(blank=True, max_length=100, verbose_name='Docker Container Path')),
                ('cmd', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='Docker Container Command')),
                ('dockerfile', models.TextField(blank=True, default=None, null=True, verbose_name='Dockerfile Contents')),
                ('buildcontainername', models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name='Docker Build Image Name')),
                ('clientscript', models.TextField(blank=True, default=None, null=True, verbose_name='Client Script Contents')),
                ('description', models.CharField(max_length=100, verbose_name='Container Description')),
                ('active', models.BooleanField(default=True)),
                ('containertype', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.ContainerType')),
            ],
        ),
        migrations.CreateModel(
            name='CloudVPC',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cidr', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('cloudid', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('cloud', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Cloud')),
            ],
        ),
        migrations.CreateModel(
            name='CloudSubnet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cidr', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('cloudid', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
                ('assign_public_ip', models.BooleanField(default=True)),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('cloud', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Cloud')),
                ('vpc', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.CloudVPC')),
            ],
        ),
        migrations.CreateModel(
            name='CloudSecurityGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('cloudid', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('cloud', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Cloud')),
                ('cloudvpc', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.CloudVPC')),
            ],
        ),
        migrations.CreateModel(
            name='CloudInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('automationvars', models.TextField(blank=True, default=None, null=True)),
                ('srcdstcheck', models.BooleanField(default=True)),
                ('username', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('description', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('publicip', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('publicdns', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('privateip', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('cloudid', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('imagesize', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('userdata', models.TextField(blank=True, default=None, null=True)),
                ('prevuserdata', models.TextField(blank=True, default=None, editable=False, null=True)),
                ('rawdata', models.TextField(blank=True, default=None, null=True)),
                ('force_script', models.BooleanField(default=False, verbose_name='Force Instance Script Update')),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('last_deployed_hash', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('cloud', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Cloud')),
                ('cloudimage', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.CloudImage')),
                ('cloudsecuritygroup', models.ManyToManyField(blank=True, to='client_sim.CloudSecurityGroup')),
                ('cloudsubnet', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.CloudSubnet')),
                ('instanceautomation', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.InstanceAutomation')),
            ],
        ),
        migrations.AddField(
            model_name='cloud',
            name='cloudtype',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.CloudType'),
        ),
        migrations.AddField(
            model_name='cloud',
            name='publickey',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Upload'),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ipaddress', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('macaddress', models.CharField(blank=True, default=client_sim.models.generate_mac, max_length=17, unique=True)),
                ('hostname', models.CharField(blank=True, default=client_sim.models.generate_host, max_length=63, unique=True)),
                ('clientid', models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name='Docker Container ID')),
                ('description', models.CharField(blank=True, default=None, max_length=100, verbose_name='Client Description')),
                ('useragent', models.CharField(blank=True, default='Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:72.0) Gecko/20100101 Firefox/72.0', max_length=100, null=True, verbose_name='HTTP User-Agent')),
                ('active', models.BooleanField(default=True)),
                ('force_rebuild', models.BooleanField(default=False, verbose_name='Force Container Rebuild')),
                ('force_script', models.BooleanField(default=False, verbose_name='Force Container Script Update')),
                ('skip_sync', models.BooleanField(default=False, editable=False)),
                ('last_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_sync', models.DateTimeField(blank=True, default=None, null=True)),
                ('last_sync_log', models.TextField(blank=True, default=None, null=True)),
                ('last_deployed_hash', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('app', models.ManyToManyField(blank=True, to='client_sim.App')),
                ('container', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Container')),
                ('dashboard', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Dashboard')),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.Network')),
            ],
        ),
        migrations.CreateModel(
            name='AppEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('starttime', models.TimeField(default=django.utils.timezone.now)),
                ('endtime', models.TimeField(default=django.utils.timezone.now)),
                ('app', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.App')),
                ('appprofile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.AppProfile')),
                ('day', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='client_sim.EventDay')),
            ],
            options={
                'ordering': ['app', 'day', 'starttime'],
            },
        ),
    ]
